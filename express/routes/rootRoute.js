// Express
const express = require("express");
const router = express.Router();
// Mongoose
const mongoose = require("mongoose");
const Doctors = mongoose.model("doctors");
const Appointments = mongoose.model("appointments");
// Moment
const moment = require("moment");

// Helper functions
const getAppointments = async (doctor_email, date, time = "") => {
    const query = {
        doctor_email,
        date
    };

    if (time.length > 0) query.time = time;

    const appointments = await Appointments.find(query);
    return appointments;
};

const validateMinutes = time => {
    try {
        const minutes = moment(time).format("mm");
        return minutes % 15 === 0 ? true : false;
    } catch (e) {
        return false;
    }
};

// Routes
// TODO:
//  * Split up appointment and doctor routes into seperate files.
router.get("/", (req, res) => {
    res.status(200).send({ response: true });
});

router.post("/create-doctor", async (req, res) => {
    const { first_name, last_name, email } = req.body;

    const newDoctor = new Doctors({
        first_name,
        last_name,
        email
    });

    try {
        const savedDoctorResponse = await newDoctor.save();
        return res.status(200).send({ savedDoctorResponse });
    } catch (e) {
        return res.status(400).send({
            error: "This doctor's email has already been taken"
        });
    }
});

router.get("/get-doctors", async (req, res) => {
    try {
        const allDoctors = await Doctors.find({});
        return res.status(200).send({ allDoctors });
    } catch (e) {
        return res.status(500).send({
            error: "An error occurred while retrieving list of doctors."
        });
    }
});

router.post("/create-appointment", async (req, res) => {
    // TODO:
    // * Validate incoming date and time
    // * Validate that kind is only follow-up and new patient

    const { first_name, last_name, kind, date, time, doctor_email } = req.body;
    const newAppointment = new Appointments({
        first_name,
        last_name,
        kind,
        date,
        time,
        doctor_email
    });

    if (!validateMinutes(time))
        return res.status(400).send({
            error:
                "Appointment has not been added. Time must be set in 15 minute increments."
        });

    const doctorAppointmentsAtTime = await getAppointments(
        doctor_email,
        date,
        time
    );

    if (doctorAppointmentsAtTime.length >= 3)
        return res.status(400).send({
            error:
                "Only 3 appointments may be scheduled for any doctor at the same time."
        });

    try {
        const savedAppointmentResponse = await newAppointment.save();
        return res.status(200).send({ savedAppointmentResponse });
    } catch (e) {
        console.log(e);
        return res.status(500).send({
            error: "An error occurred while creating this appointment"
        });
    }
});

router.post("/get-appointments", async (req, res) => {
    const { doctor_email, date } = req.body;
    try {
        const returnedAppointments = await getAppointments(doctor_email, date);
        return res.status(200).send({ returnedAppointments });
    } catch (e) {
        console.log(e);
        return res.status(500).send({
            error: "An error occurred while retrieving appointments."
        });
    }
});

router.delete("/delete-appointment", async (req, res) => {
    const { _id } = req.body;
    try {
        const deletedAppointmentResponse = await Appointments.deleteOne({
            _id
        });
        return res.status(200).send({ deletedAppointmentResponse });
    } catch (e) {
        console.log(e);
        return res.status(500).send({
            error: "Something went wrong while deleting this document"
        });
    }
});

module.exports = router;
